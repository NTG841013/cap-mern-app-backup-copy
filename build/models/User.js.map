{"version":3,"sources":["../../src/models/User.js"],"names":["Schema","mongoose","userSchema","provider","type","String","required","username","lowercase","unique","match","index","email","password","trim","minlength","maxlength","name","avatar","role","default","bio","googleId","sparse","facebookId","messages","Types","ObjectId","ref","timestamps","console","log","__dirname","process","env","IMAGES_FOLDER_PATH","methods","toJSON","absoluteAvatarFilePath","fs","existsSync","id","_id","createdAt","updatedAt","isProduction","NODE_ENV","secretOrKey","JWT_SECRET_PROD","JWT_SECRET_DEV","generateJWT","token","jwt","sign","expiresIn","registerUser","newUser","callback","bcrypt","genSalt","err","salt","hash","errh","save","comparePassword","candidatePassword","compare","isMatch","hashPassword","saltRounds","hashedPassword","Promise","resolve","reject","validateUser","user","schema","Joi","any","string","min","max","regex","allow","validate","User","model"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { join } from 'path';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport Joi from 'joi';\nimport { isValidUrl } from '../utils/utils';\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema({\n    provider: {\n        type: String,\n        required: true,\n    },\n    username: {\n        type: String,\n        lowercase: true,\n        unique: true,\n        required: [true, \"can't be blank\"],\n        match: [/^[a-zA-Z0-9_]+$/, 'is invalid'],\n        index: true,\n    },\n    email: {\n        type: String,\n        lowercase: true,\n        unique: true,\n        required: [true, \"can't be blank\"],\n        match: [/\\S+@\\S+\\.\\S+/, 'is invalid'],\n        index: true,\n    },\n    password: {\n        type: String,\n        trim: true,\n        minlength: 6,\n        maxlength: 60,\n    },\n    name: String,\n    avatar: String,\n    role: { type: String, default: 'USER' },\n    bio: String,\n    // google\n    googleId: {\n        type: String,\n        unique: true,\n        sparse: true,\n    },\n    // fb\n    facebookId: {\n        type: String,\n        unique: true,\n        sparse: true,\n    },\n    messages: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Message' }],\n}, { timestamps: true }, );\n\nconsole.log(join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH));\n\nuserSchema.methods.toJSON = function() {\n    // if not exists avatar1 default\n    const absoluteAvatarFilePath = `${join(__dirname, '../..', process.env.IMAGES_FOLDER_PATH)}${this.avatar}`;\n    const avatar = isValidUrl(this.avatar) ?\n        this.avatar :\n        fs.existsSync(absoluteAvatarFilePath) ?\n        `${process.env.IMAGES_FOLDER_PATH}${this.avatar}` :\n        `${process.env.IMAGES_FOLDER_PATH}avatar2.jpg`;\n\n    return {\n        id: this._id,\n        provider: this.provider,\n        email: this.email,\n        username: this.username,\n        avatar: avatar,\n        name: this.name,\n        role: this.role,\n        createdAt: this.createdAt,\n        updatedAt: this.updatedAt,\n    };\n};\n\nconst isProduction = process.env.NODE_ENV === 'production';\nconst secretOrKey = isProduction ? process.env.JWT_SECRET_PROD : process.env.JWT_SECRET_DEV;\n\nuserSchema.methods.generateJWT = function() {\n    const token = jwt.sign({\n            expiresIn: '12h',\n            id: this._id,\n            provider: this.provider,\n            email: this.email,\n        },\n        secretOrKey,\n    );\n    return token;\n};\n\nuserSchema.methods.registerUser = (newUser, callback) => {\n    bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (errh, hash) => {\n            if (err) {\n                console.log(err);\n            }\n            // set pasword to hash\n            newUser.password = hash;\n            newUser.save(callback);\n        });\n    });\n};\n\nuserSchema.methods.comparePassword = function(candidatePassword, callback) {\n    bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\n        if (err) return callback(err);\n        callback(null, isMatch);\n    });\n};\n\n// const delay = (t, ...vs) => new Promise(r => setTimeout(r, t, ...vs)) or util.promisify(setTimeout)\n\nexport async function hashPassword(password) {\n    const saltRounds = 10;\n\n    const hashedPassword = await new Promise((resolve, reject) => {\n        bcrypt.hash(password, saltRounds, function(err, hash) {\n            if (err) reject(err);\n            else resolve(hash);\n        });\n    });\n\n    return hashedPassword;\n}\n\nexport const validateUser = (user) => {\n    const schema = {\n        avatar: Joi.any(),\n        name: Joi.string().min(2).max(30).required(),\n        username: Joi.string()\n            .min(2)\n            .max(20)\n            .regex(/^[a-zA-Z0-9_]+$/)\n            .required(),\n        password: Joi.string().min(6).max(20).allow('').allow(null),\n    };\n\n    return Joi.validate(user, schema);\n};\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;"],"file":"User.js"}